using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcxxffi"], :libcxxffi),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/Cxx.jl/releases/download/libcxxffi-binaries-1.3/"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-linux-gnu-libgfortran4.tar.gz", "e7d2bf1791f0d03491ec2b918f7ba4b12bbaf1281e42fd54bcc0defb716c106e"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-apple-darwin14-libgfortran4.tar.gz", "ed170a5be89ddd7b5b672005b4fecba181f5b9f19b2c93c9dbae5334eb7dd167"),
    Windows(:x86_64) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-w64-mingw32-libgfortran4.tar.gz", "b53aaab234a2e4241e81280bc587ca125296e82d8365ffd4b74b0cd422bc3416"),
    #FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-unknown-freebsd11.1-gcc7.tar.gz", "930df7bf7ecded6936dd9f637787b7eade402c07c0c2b2b49c4e72329d6bd9ef"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose, ignore_platform=true)
end

# Write out a deps.jl file that will contain mappings for our products
# write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
